
1. Tampilkan seluruh data dari tabel "employees"
----------------------------------------
SELECT * FROM employees;

2. Berapa banyak karyawan yang memiliki posisi pekerjaan (job title) "Manager"?
----------------------------------------
SELECT COUNT(*) AS number_of_managers
FROM employees
WHERE job_title = 'Manager';

3. Tampilkan daftar nama dan gaji (salary) dari karyawan yang bekerja di departemen "Sales" atau "Marketing"
----------------------------------------
SELECT name, salary
FROM employees
WHERE department IN ('Sales', 'Marketing');

4. Hitung rata-rata gaji (salary) dari karyawan yang bergabung (joined) dalam 5 tahun terakhir (berdasarkan kolom "joined_date")
----------------------------------------
SELECT AVG(salary) AS average_salary
FROM employees
WHERE joined_date >= CURDATE() - INTERVAL 5 YEAR;

5. Tampilkan 5 karyawan dengan total penjualan (sales) tertinggi dari tabel "employees" dan "sales_data"
----------------------------------------
SELECT e.name, SUM(s.sales) AS total_sales
FROM employees e
JOIN sales_data s ON e.employee_id = s.employee_id
GROUP BY e.name
ORDER BY total_sales DESC
LIMIT 5;

6. Tampilkan nama, gaji (salary), dan rata-rata gaji (salary) dari semua karyawan yang bekerja di departemen yang memiliki rata-rata gaji lebih tinggi dari gaji rata-rata di semua departemen
----------------------------------------
SELECT e.name, e.salary, department_avg.average_salary
FROM employees e
JOIN (
  SELECT department, AVG(salary) AS average_salary
  FROM employees
  GROUP BY department
) department_avg ON e.department = department_avg.department
WHERE department_avg.average_salary > (SELECT AVG(salary) FROM employees);

7. Tampilkan nama dan total penjualan (sales) dari setiap karyawan, bersama dengan peringkat (ranking) masing-masing karyawan berdasarkan total penjualan. Peringkat 1 adalah karyawan dengan total penjualan tertinggi
----------------------------------------
SELECT e.name, SUM(s.sales) AS total_sales,
       RANK() OVER (ORDER BY SUM(s.sales) DESC) AS sales_rank
FROM employees e
JOIN sales_data s ON e.employee_id = s.employee_id
GROUP BY e.name
ORDER BY sales_rank;

8. Buat sebuah stored procedure yang menerima nama departemen sebagai input, dan mengembalikan daftar karyawan dalam departemen tersebut bersama dengan total gaji (salary) yang mereka terima
----------------------------------------
DELIMITER $$

CREATE PROCEDURE GetEmployeesByDepartment(department_name VARCHAR(255))
BEGIN
    SELECT name, SUM(salary) AS total_salary
    FROM employees
    WHERE department = department_name
    GROUP BY name;
END $$

DELIMITER ;

Menjalankan Stored Procedure:
----------------------------------------
CALL GetEmployeesByDepartment('Sales');
